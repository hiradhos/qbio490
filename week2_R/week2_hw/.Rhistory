getwd()
knitr::opts_knit$set(root.dir = normalizePath("/Users/hiradh/Desktop/qbio_490_hirad_hosseini/week2_R/week2_hw"))
data(attenu) # peak earthquake accelerations measured at various observation sites
data(iris) # various measurements for flowers of different species
force(attenu)
View(attenu)
force(iris)
View(iris)
View(iris)
# write code here
na_boolean_mask <- is.na(attenu$station)
na_boolean_mask
# write code here
sum(na_boolean_mask)
mask <- c(TRUE, TRUE, FALSE, FALSE, TRUE)
df_cleaned <- df[mask, ] # with above mask placed in the rows section here, the cleaned data frame will contain all of the data for rows 1, 2, and 5
typeof(df)
df_cleaned <- na_boolean_mask[mask, ] # with above mask placed in the rows section here, the cleaned data frame will contain all of the data for rows 1, 2, and 5
dim(na_boolean_mask)
length(na_boolean_mask)
df_cleaned <- na_boolean_mask[mask] # with above mask placed in the rows section here, the cleaned data frame will contain all of the data for rows 1, 2, and 5
df_cleaned
mask <- c(TRUE, TRUE, FALSE, FALSE, TRUE)
df_cleaned <- attenu[mask, ] # with above mask placed in the rows section here, the cleaned data frame will contain all of the data for rows 1, 2, and 5
df
attenu
#Since is.na() assigns TRUE to NA values, we want to ignore all TRUE values in order to clean our dataset.
# write code here
mask <- "FALSE"
attenu_cleaned <- attenu["FALSE",]
# write code here
attenu_cleaned
#Since is.na() assigns TRUE to NA values, we want to ignore all TRUE values in order to clean our dataset.
# write code here
mask <- "FALSE"
attenu_cleaned <- na_boolean_mask[mask],]
attenu_cleaned <- na_boolean_mask[mask,]
dim(attenu)
attenu
attenu_cleaned <- attenu[na_boolean_mask,]
# write code here
attenu_cleaned
#Since is.na() assigns TRUE to NA values, we want to ignore all TRUE values in order to clean our dataset.
# write code here
mask <- na_boolean_mask
dim(attenu)
attenu
attenu_cleaned <- attenu[,na_boolean_mask]
mask
attenu_cleaned <- attenu[na_boolean_mask,]
# write code here
attenu_cleaned
attenu_cleaned <- attenu[-na_boolean_mask,]
# write code here
attenu_cleaned
#Since is.na() assigns TRUE to NA values, we want to ignore all TRUE values in order to clean our dataset.
# write code here
mask <- na_boolean_mask
attenu_cleaned <- attenu[na_boolean_mask == 0,]
# write code here
attenu_cleaned
# write code here
nrow(attenu)
nrow(attenu_cleaned)
# write code here
?boxplot
View(df_cleaned)
boxplot(Sepal.Length ~ Species)
boxplot(Sepal.Length ~ Species, iris)
# write code here
?histogram
# write code here
?hist
hist(Petal.Length, iris)
hist(iris$Petal.Length)
# write code here
mean(iris$Sepal.Width)
mean(iris$Petal.Width)
?ifelse
# write code here
x_mean <- mean(iris$Sepal.Width)
y_mean <- mean(iris$Petal.Width)
colors <- ifelse((x > x_mean) & (y > y_mean), "blue", ifelse((x > x_mean) & (y < y_mean), "red", ifelse((x < x_mean) & (y < y_mean), "green", ifelse((x < x_mean) & (y > y_mean), "yellow", "error"))) )
x <- iris$Sepal.Width
y <- iris$Petal.Width
colors <- ifelse((x > x_mean) & (y > y_mean), "blue", ifelse((x > x_mean) & (y < y_mean), "red", ifelse((x < x_mean) & (y < y_mean), "green", ifelse((x < x_mean) & (y > y_mean), "yellow", "error"))) )
colors
as.factor(colors)
print(cor.text(x,y))
print(cor.test(x,y))
?plot
plot(x, y, col=colors)
?abline
abline(v=x_mean)
plot(x, y, col=colors)
abline(v=x_mean)
# write code here
x_mean <- mean(iris$Sepal.Width)
y_mean <- mean(iris$Petal.Width)
x <- iris$Sepal.Width
y <- iris$Petal.Width
colors <- ifelse((x > x_mean) & (y > y_mean), "blue", ifelse((x > x_mean) & (y < y_mean), "red", ifelse((x < x_mean) & (y < y_mean), "green", ifelse((x < x_mean) & (y > y_mean), "yellow", "error"))) )
as.factor(colors)
print(cor.test(x,y))
?plot
plot(x, y, col=colors)
?abline
abline(v=x_mean)
abline(h=y_mean)
# write code here
?pairs
pairs(iris)
pairs(iris, col=iris$Species)
legend(7,4.3,unique(data$Species),col=1:length(data$Species),pch=1)
legend(7,4.3,unique(iris$Species),col=1:length(data$Species),pch=1)
# write code here
?pairs
pairs(iris, col=iris$Species)
legend(7,4.3,unique(iris$Species),col=1:length(data$Species),pch=1)
# write code here
?pairs
pairs(iris, col=iris$Species)
legend(7,4.3,unique(iris$Species),col=1:length(iris$Species),pch=1)
# write code here
?pairs
pairs(iris, col=iris$Species)
?legend
legend(col=1:unique(iris$Species), pch=1)
legend(unique(iris$Species),col=1:length(iris$Species), pch=1)
# write code here
?pairs
pairs(iris, col=iris$Species)
?legend
legend(unique(iris$Species),col=1:length(iris$Species), pch=1)
# write code here
?pairs
pairs(iris, col=iris$Species)
?legend
legend(10, 0, unique(iris$Species),col=1:length(iris$Species), pch=1)
# write code here
?pairs
pairs(iris, col=iris$Species)
?legend
legend(10, 100, unique(iris$Species),col=1:length(iris$Species), pch=1)
# write code here
?pairs
pairs(iris, col=iris$Species)
?legend
legend(100, 100, unique(iris$Species),col=1:length(iris$Species), pch=1)
# write code here
?pairs
pairs(iris, col=iris$Species)
?legend
legend(0, 0, unique(iris$Species),col=1:length(iris$Species), pch=1)
# write code here
?pairs
pairs(iris, col=iris$Species)
write.csv(attenu_cleaned, "Users/hiradh/Desktop/dataframe.csv") # in R, file paths are strings so don't forget the quotes!
?write.csv
# write code here
write.cssv(attenu_cleaned, "/Users/hiradh/Desktop/attenu_cleaned.csv")
# write code here
write.csv(attenu_cleaned, "/Users/hiradh/Desktop/attenu_cleaned.csv")
# write code here
attenu_read_in <- read.csv("Users/hiradh/Desktop/attenu_cleaned.csv", header=TRUE)
# write code here
attenu_read_in <- read.csv("/Users/hiradh/Desktop/attenu_cleaned.csv", header=TRUE)
attenu_read_in
# write code here
jpg("/Users/hiradh/Desktop/plot.jpg") # choose any file extension, typically jpg and pdf are most common
# write code here
?jpg
# write code here
??jpg
# write code here
jpeg("/Users/hiradh/Desktop/plot.pdf") # choose any file extension, typically jpg and pdf are most common
hist(iris$Petal.Length)
dev.off() # close the plotting environment and save the plot
# write code here
jpeg("/Users/hiradh/Desktop/plot.jpeg") # choose any file extension, typically jpg and pdf are most common
hist(iris$Petal.Length)
dev.off() # close the plotting environment and save the plot
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
```{r}
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.14")
library(BiocManager)
if (!require("TCGAbiolinks", quietly = TRUE))
BiocManager::install("TCGAbiolinks") # notice this is different from the typical "install.packages" command. that's because BiocManager is necessary to install and manage packages from the Bioconductor project
library(TCGAbiolinks)
